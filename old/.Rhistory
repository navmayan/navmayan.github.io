# obj1, obj2, condObj1Pos, condObj1Neg, condObj2Pos, condObj2Neg, # these are more strict parameters
# minRT=300, excludeFast=400, excludeSlow=5000, prefix=NULL)
obj1, obj2, condObj1Pos, condObj1Neg, condObj2Pos, condObj2Neg, # these parameters are the same as the usual scorer
minRT=300, excludeFast=400, excludeSlow=10000, prefix=NULL)
{
##
#Set variable names
#The spfraw must have the latency in the variable rt or trial_latency
if (is.null(spfraw$rt))
{
spfraw$rt <- spfraw$trial_latency
}
#The spfraw must have the error code in the variable err or trial_error
if (is.null(spfraw$err))
{
spfraw$err <- spfraw$trial_error
}
#The spfraw must have the subject ID in the variable subj or session_id
if (is.null(spfraw$subj))
{
spfraw$subj <- spfraw$session_id
}
#get number of trials
ntrials <- summaryBy(rt ~ subj, data = spfraw,
FUN = function(x) {
return(c(
n = sum(!is.na(x))
))
})
#flag fast trials rate
spfraw$fast <- (spfraw$rt < minRT)
spfraw$slow <- (spfraw$rt > excludeSlow)
spfraw$trialOK <- (spfraw$rt >= excludeFast & spfraw$rt < excludeSlow)
#Get number and rate of fast, slow and error trials
rates <- summaryBy(slow + fast + err + trialOK ~ subj, data=spfraw,FUN=function(x) { return(c(
n = sum(x, na.rm=T),
m = mean(x, na.rm=T)
))})
# trials to include in the scoring
gspfraw <- spfraw[spfraw$trialOK==1,]
print(paste('good trials=', nrow(gspfraw), 'total trials=', nrow(spfraw), 'rate=', nrow(gspfraw)/nrow(spfraw)))
#Compute mean and sd RT for each part
partStats=summaryBy(rt ~ subj+part, data=gspfraw,
FUN=function(x) {
return(c(
m=mean(x,na.rm=T),
s=sd(x,na.rm=T)
))
})
#Compute mean RT for each condition for each part
obj1NegStats=summaryBy(rt ~ subj+part, data=gspfraw[gspfraw$cond==condObj1Neg,],
FUN=function(x) {
return(c(
obj1Neg.m=mean(x,na.rm=T)
))
})
obj1PosStats=summaryBy(rt ~ subj+part, data=gspfraw[gspfraw$cond==condObj1Pos,],
FUN=function(x) {
return(c(
obj1Pos.m=mean(x,na.rm=T)
))
})
obj2NegStats=summaryBy(rt ~ subj+part, data=gspfraw[gspfraw$cond==condObj2Neg,],
FUN=function(x) {
return(c(
obj2Neg.m=mean(x,na.rm=T)
))
})
obj2PosStats=summaryBy(rt ~ subj+part, data=gspfraw[gspfraw$cond==condObj2Pos,],
FUN=function(x) {
return(c(
obj2Pos.m=mean(x,na.rm=T)
))
})
#Merge all those means
ds <- merge(partStats, obj1NegStats, by=c('subj', 'part'))
ds <- merge(ds, obj1PosStats, by=c('subj', 'part'))
ds <- merge(ds, obj2NegStats, by=c('subj', 'part'))
ds <- merge(ds, obj2PosStats, by=c('subj', 'part'))
#Compute D for each condition (in each part)
ds$D.obj1Pos <- (ds$rt.m-ds$rt.obj1Pos.m) / ds$rt.s
ds$D.obj1Neg <- (ds$rt.m-ds$rt.obj1Neg.m) / ds$rt.s
ds$D.obj2Pos <- (ds$rt.m-ds$rt.obj2Pos.m) / ds$rt.s
ds$D.obj2Neg <- (ds$rt.m-ds$rt.obj2Neg.m) / ds$rt.s
#Compute D for each object (in each part)
ds$D.obj1 <- ds$D.obj1Pos-ds$D.obj1Neg
ds$D.obj2 <- ds$D.obj2Pos-ds$D.obj2Neg
#Compute preference D (in each part)
ds$D <- ds$D.obj1-ds$D.obj2
#Compute means for the D scores beyond part
dsM <- summaryBy(D + D.obj2 + D.obj1 + D.obj2Neg + D.obj2Pos + D.obj1Neg + D.obj1Pos ~ subj, data=ds)
colnames(dsM) <- gsub('.mean', '', colnames(dsM))
#Change the part variable name
ds$part <- paste('p', ds$part, sep='')
#Switch to longer and then to wide format.
ds.long <- melt(ds, id.vars=c('subj', 'part'))
ds.wide <- data.table::dcast(data=ds.long, subj ~ part+variable, value.var = 'value', sep='.')
#Merge the data sets
scores <- merge(ds.wide, dsM, by='subj', all=T)
scores <- merge(scores, rates, by='subj', all=T)
scores <- merge(scores, ntrials, by='subj', all=T)
#Rename _ to .
colnames(scores) <- gsub('_', '.', colnames(scores))
#Renam conditions to their name
colnames(scores) <- gsub('obj1Pos', condObj1Pos, colnames(scores))
colnames(scores) <- gsub('obj1Neg', condObj1Neg, colnames(scores))
colnames(scores) <- gsub('obj2Pos', condObj2Pos, colnames(scores))
colnames(scores) <- gsub('obj2Neg', condObj2Neg, colnames(scores))
colnames(scores) <- gsub('obj1', obj1, colnames(scores))
colnames(scores) <- gsub('obj2', obj2, colnames(scores))
if (!is.null(prefix))
{
colnames(scores) <- paste(prefix, colnames(scores), sep='.')
}
return(scores)
}
#Create trial type, instead of block_pairing_definition: what is the current Construal and speed.
spfRaw$currentConstrual <- gsub("[|.*$]", "", spfRaw$block_name)
spfRaw$currentConstrual <- gsub("Fast", "", spfRaw$currentConstrual)
spfRaw$currentConstrual <- gsub("Slow", "", spfRaw$currentConstrual)
unique(spfRaw$currentConstrual)
spfRaw$currentSpeed <- gsub("[|.*$]", "", spfRaw$block_name)
spfRaw$currentSpeed <- gsub("Abstract", "", spfRaw$currentSpeed)
spfRaw$currentSpeed <- gsub("Concrete", "", spfRaw$currentSpeed)
unique(spfRaw$currentSpeed)
spfRaw$cond <- gsub("[|.*$]", "", spfRaw$block_name)
unique(spfRaw$cond)
spfRaw$part <- spfRaw$block_number
### save raw data to file.
write.csv(spfRaw,file = "spfRaw.csv",na = "")
### use spf function to calculate D scores
spfRaw <- as.data.frame(spfRaw)
spfscore <- spfScorer2(spfraw=spfRaw, obj1='Fast', obj2='Slow',
condObj1Pos='ConcreteFast', condObj1Neg='AbstractFast',
condObj2Pos='ConcreteSlow', condObj2Neg='AbstractSlow',
prefix='spf')
spfscore_Construal <- spfScorer(spfraw=spfRaw, obj1='Concrete', obj2='Abstract',
condObj1Pos='ConcreteFast', condObj1Neg='ConcreteSlow',
condObj2Pos='AbstractFast', condObj2Neg='AbstractSlow',
prefix='spf')
# turn data to long format
spfscore_long <- spfscore%>% tidyr::gather(objSpeed, dscores, spf.D.Fast:spf.D.Slow)
spfscore_longer <- spfscore%>% tidyr::gather(catCond, dscores, spf.D.AbstractSlow:spf.D.ConcreteFast)
spfscore_longer <- spfscore_longer %>% select(spf.subj, dscores, catCond)
spfscore_longer$speed <- NA
spfscore_longer$speed[which(grepl('Slow', spfscore_longer$catCond))] <- 'Slow'
spfscore_longer$speed[which(grepl('Fast', spfscore_longer$catCond))] <- 'Fast'
spfscore_longer$Construal <- NA
spfscore_longer$Construal[which(grepl('Abstract', spfscore_longer$catCond))] <- 'Abstract'
spfscore_longer$Construal[which(grepl('Concrete', spfscore_longer$catCond))] <- 'Concrete'
table(spfscore_longer$speed, exclude=NULL)
table(spfscore_longer$Construal, exclude=NULL)
#lang <- explicit %>% dplyr::filter(question_name=="lang")
#spfscore$lang <- lang$question_response[match(spfscore$spf.subj, lang$session_id)]
#spfscore_f <- spfscore %>% dplyr::filter(lang==1)
# code categories location
top_cat <- explicit %>% filter(question_name == "topCategory") # always "Abstract"
left_cat <- explicit %>% filter(question_name == "leftAttribute") # "Slow" "Fast"
unique(top_cat$question_response)
unique(left_cat$question_response)
spfscore$left_cat <- left_cat$question_response[match(spfscore$spf.subj, left_cat$session_id)]
write.csv(spfscore,file = "sdspf3_spf.csv",na = "")
write.csv(spfscore_long,file = "sdspf3_spf_long.csv",na = "")
write.csv(spfscore_longer,file = "sdspf3_spf_longer.csv",na = "")
write.csv(spfscore_Construal,file = "sdspf3_c_spf.csv",na = "")
write.csv(spfscore_Construal,file = "sdspf3_c_spf_long.csv",na = "")
# spfRaw$correct <- 1-spfRaw$trial_error
expDimension <- explicit %>% dplyr::filter(question_name=="expDimension") # expDimension = 'pace'/'abstractness'
# concepts = 'Slow', 'Fast, assigned randomly to concept1,concept2
concept1 <- explicit %>% dplyr::filter(question_name=="concept1") # on the left side of the scale
concept2 <- explicit %>% dplyr::filter(question_name=="concept2") # on the right side of the scale
unique(expDimension$question_response)
unique(concept1$question_response)
unique(concept2$question_response)
ConstrualQ <- explicit %>% dplyr::filter(question_name=="exp.general" |question_name=="exp.why" | question_name=="exp.abstract" | question_name=="exp.aim"|question_name=="exp.concrete" | question_name=="exp.how" | question_name=="exp.specific" | question_name=="exp.means")
unique(ConstrualQ$question_name)
speedQ <- explicit %>% dplyr::filter(question_name=="exp.slower" |question_name=="exp.slow" | question_name=="exp.slowness" | question_name=="exp.slowly"|question_name=="exp.rapid" | question_name=="exp.fast" | question_name=="exp.quick" | question_name=="exp.speedy")
unique(speedQ$question_name)
#transform responses to numeric
ConstrualQ <- transform(ConstrualQ, question_response=as.numeric(question_response))
ConstrualQ$question_response[ConstrualQ$question_response == -999] <- NA
speedQ <- transform(speedQ, question_response=as.numeric(question_response))
speedQ$question_response[speedQ$question_response == -999] <- NA
ConstrualQ$concept1 <- concept1$question_response[match(ConstrualQ$session_id, concept1$session_id)]
ConstrualQ$concept2 <- concept2$question_response[match(ConstrualQ$session_id, concept2$session_id)]
speedQ$concept1 <- concept1$question_response[match(speedQ$session_id, concept1$session_id)]
speedQ$concept2 <- concept2$question_response[match(speedQ$session_id, concept2$session_id)]
# reverse code the scale
speedQ$rResp <- NA
speedQ$rResp <- ifelse(speedQ$concept1=="Concrete",speedQ$question_response,
ifelse(speedQ$concept1=="Abstract",reverse.code(-1,speedQ$question_response,mini=1,maxi=100), NA))
ConstrualQ$rResp <- NA
ConstrualQ$rResp <- ifelse(ConstrualQ$concept1=="Fast",ConstrualQ$question_response,
ifelse(ConstrualQ$concept1=="Slow",reverse.code(-1,ConstrualQ$question_response,mini=1,maxi=100), NA))
table(ConstrualQ$question_response[ConstrualQ$concept1=="Slow"])
table(ConstrualQ$rResp[ConstrualQ$concept1=="Slow"])
# save construal being asked about
ConstrualQ$Construal <- substring(ConstrualQ$question_name, 5)
ConstrualQ$ConstrualCat <- 'Concrete'
ConstrualQ$ConstrualCat[which(grepl('abstract', ConstrualQ$Construal))] <- 'Abstract'
ConstrualQ$ConstrualCat[which(grepl('aim', ConstrualQ$Construal))] <- 'Abstract'
ConstrualQ$ConstrualCat[which(grepl('general', ConstrualQ$Construal))] <- 'Abstract'
ConstrualQ$ConstrualCat[which(grepl('why', ConstrualQ$Construal))] <- 'Abstract'
table(ConstrualQ$ConstrualCat, exclude=NULL)
# save speed being asked about
speedQ$speed <- substring(speedQ$question_name, 5)
speedQ$speedCat <- 'Fast'
speedQ$speedCat[which(grepl('slow', speedQ$speed))] <- 'Slow'
table(speedQ$speedCat, exclude=NULL)
# calculate mean
Construal_mean <-  ConstrualQ %>%
group_by(session_id,ConstrualCat)%>%
dplyr::summarise(MeanAssos = mean(rResp, na.rm=TRUE))
Construal_mean <- as.data.frame(Construal_mean)
speed_mean <-  speedQ %>%
group_by(session_id,speedCat)%>%
dplyr::summarise(MeanAssos = mean(rResp, na.rm=TRUE))
speed_mean <- as.data.frame(speed_mean)
# turn to wide format
Construal_mean <- Construal_mean %>% select(session_id, ConstrualCat, MeanAssos)
Construal_wide <- tidyr::spread(Construal_mean, key= ConstrualCat, value= MeanAssos)
# code concept on the left / right
Construal_mean$concept1 <- concept1$question_response[match(Construal_mean$session_id, concept1$session_id)] # left
Construal_mean$concept2 <- concept2$question_response[match(Construal_mean$session_id, concept2$session_id)] # right
Construal_wide$concept1 <- concept1$question_response[match(Construal_wide$session_id, concept1$session_id)] # left
Construal_wide$concept2 <- concept2$question_response[match(Construal_wide$session_id, concept2$session_id)] # right
Construal_mean$leftconcept <- Construal_mean$concept1
Construal_mean$rightconcept <- Construal_mean$concept2
Construal_wide$leftconcept <- Construal_wide$concept1
Construal_wide$rightconcept <- Construal_wide$concept2
# turn to wide format
speed_mean <- speed_mean %>% select(session_id, speedCat, MeanAssos)
speed_wide <- tidyr::spread(speed_mean, key= speedCat, value= MeanAssos)
speed_mean$concept1 <- concept1$question_response[match(speed_mean$session_id, concept1$session_id)] # left
speed_mean$concept2 <- concept2$question_response[match(speed_mean$session_id, concept2$session_id)] # right
speed_wide$concept1 <- concept1$question_response[match(speed_wide$session_id, concept1$session_id)] # left
speed_wide$concept2 <- concept2$question_response[match(speed_wide$session_id, concept2$session_id)] # right
speed_mean$leftconcept <- speed_mean$concept1
speed_mean$rightconcept <- speed_mean$concept2
speed_wide$leftconcept <- speed_wide$concept1
speed_wide$rightconcept <- speed_wide$concept2
##save to file
write.csv(Construal_mean,file = "Construal_mean.csv",na = "")
write.csv(speed_mean,file = "speed_mean.csv",na = "")
write.csv(Construal_wide,file = "Construal_wide.csv",na = "")
write.csv(speed_wide,file = "speed_wide.csv",na = "")
#read file
demographics.long <- read.delim("demographics.txt", stringsAsFactors = FALSE)
nrow(demographics.long)
d2 <- demographics.long[!duplicated(demographics.long),]
#Convert to wide format (One row per user_id)
d2 <- d2[!duplicated(d2[,c('user_id', 'characteristic')]),]
demographics <- dcast(d2, user_id ~ characteristic, value.var = 'value')
#Need the sessions data (because demographics is by user_id, and the sessionTasks.txt maps user_id to session_id)
sl <- read.table("sessionTasks.txt", sep="\t", header=TRUE, fill=TRUE)
#Always test all rows were read fine (open the txt file in notepad++ to
#count the lines)
nrow(sl)
#Merge with session_id, mostly to get the session_id.
sl <- sl[,c("session_id", "user_id")]
sl <- sl[!duplicated(sl),]
demographics = merge(demographics, sl[,c("session_id", "user_id")], by = "user_id", all=T)
#We drop the user_id column here (can also just set demographics.user_id = NULL)
demographics = data.frame(demographics[,which(names(demographics) != "user_id")])
#Calculate age (will use the local computer time)
demographics$age = 2020 - as.numeric(as.character(demographics$birthyear))
#Decode race
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 1, "race"] = "ntvAm"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 2, "race"] = "eAsia"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 3, "race"] = "sAsia"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 4, "race"] = "natPc"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 5, "race"] = "black"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 6, "race"] = "white"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 7, "race"] = "blkwh"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 8, "race"] = "mixed"
demographics[!is.na(demographics$raceomb) & demographics$raceomb == 9, "race"] = "unkno"
#Political id and origin
demographics$dPlt = demographics$politicalid
demographics$orgn = demographics$citizenship
#set dPlt as numeric
demographics$dPlt <- as.numeric(as.character(demographics$dPlt))
#Remove redundant variables
demographics = demographics[,c("session_id", "dPlt", "sex", "age", "orgn", "race")]
rm(demographics.long, d2, Fdemographics.long, Mdemographics.long, sl, slF, slM)
explicit1 <- speed_wide %>% select(session_id, Fast, Slow, concept1)
explicit1$diff <- explicit1$Slow - explicit1$Fast
explicit2 <- Construal_wide %>% select(session_id, Concrete, Abstract, concept1)
explicit2$diff <- explicit2$Abstract - explicit2$Concrete
explicit1$dimension <- "speed"
explicit2$dimension <- "construal"
colnames(explicit1)[4] <- "left_concept"
colnames(explicit2)[4] <- "left_concept"
colnames(explicit1)[2] <- "rate1" # fast
colnames(explicit2)[2] <- "rate1" # near
colnames(explicit1)[3] <- "rate2" # slow
colnames(explicit2)[3] <- "rate2" # far
explicits <- bind_rows(explicit1,explicit2)
# drop incomplete responses
explicits <- explicits %>% filter(diff!= "NaN")
# merge explicit with implicit (for data saving)
spfscore$session_id <- spfscore$spf.subj
alldat <- full_join(spfscore,explicits, by = "session_id")
# merge with demographics
alldat_full <- left_join(alldat,demographics, by = "session_id")
alldat_full$spf.ok <- (alldat_full$spf.fast.m <= 0.1)
View(sessions)
## code Ps that did not complete the study
alldat_full$comp <- sessions$ord8[match(alldat_full$session_id, sessions$session_id)]
table(alldat_full$comp,exclude = NULL)
write.csv(alldat_full,file = "sdspf3_started_sessions.csv",na = "") # total N = 550, 497 completed
#drop NAs from incomplete sessions *from any task*
alldat_completed <- alldat_full %>% tidyr::drop_na(comp) %>% drop_na(diff) %>% drop_na(spf.D)
write.csv(alldat_completed,file = "sdspf3_completed_sessions.csv",na = "") # total N = 467
# exclude bad spf performance and participants who didn't complete the task
spf_completed <- alldat_full %>% tidyr::drop_na(comp) %>% dplyr::filter(spf.ok==TRUE) %>% drop_na(spf.D) %>% select(session_id,spf.D,spf.D.SlowFar,spf.D.SlowNear,spf.D.FastFar,spf.D.FastNear,left_cat,dPlt,age,sex,race,orgn,comp)
# exclude bad spf performance and participants who didn't complete the task
spf_completed <- alldat_full %>% tidyr::drop_na(comp) %>% dplyr::filter(spf.ok==TRUE) %>% drop_na(spf.D) %>% select(session_id,spf.D,spf.D.SlowAbstract,spf.D.SlowConcrete,spf.D.FastAbstract,spf.D.FastConcrete,left_cat,dPlt,age,sex,race,orgn,comp)
# exclude bad spf performance and participants who didn't complete the task
spf_completed <- alldat_full %>% tidyr::drop_na(comp) %>% dplyr::filter(spf.ok==TRUE) %>% drop_na(spf.D) %>% select(session_id,spf.D,spf.D.AbstractSlow,spf.D.ConcreteSlow,spf.D.AbstractFast,spf.D.ConcreteFast,left_cat,dPlt,age,sex,race,orgn,comp)
write.csv(spf_completed,file = "sdspf3_cleaned_sessions.csv",na = "") # total N = 475
# exclude participants who didn't complete the task
explicits_completed <- alldat_full %>% drop_na(diff) %>% select(session_id,rate1,rate2,left_concept,diff,dimension,dPlt,age,sex,race,orgn,comp)
write.csv(explicits_completed,file = "sdspf1_exp_completed_sessions.csv",na = "") # total N = 469
started <- sessions %>% nrow() %>% as.data.frame()
finished <- sessions %>% filter(ord8=="lastpage") %>% nrow() %>% as.data.frame()
included <- spf_completed %>% nrow() %>% as.data.frame()
comptable <- cbind(started,finished,included)
colnames(comptable)[1:3] <- c("started", "finished", "included")
comptable$excluded <- comptable$finished - comptable$included
exclusion_rate <- (comptable$excluded / comptable$finished) * 100
comptable_spf <- comptable
n_speed <- explicits_completed %>% filter(dimension == "speed") %>% nrow()
n_construal <- explicits_completed %>% filter(dimension == "construal") %>% nrow()
n_explicit <- nrow(explicits_completed)
rate_speedtask <- (n_speed / n_explicit) * 100
rate_construaltask <- (n_construal / n_explicit) * 100
started <- sessions %>% nrow() %>% as.data.frame()
finished <- sessions %>% filter(ord8=="lastpage") %>% nrow() %>% as.data.frame()
included <- explicits_completed %>% nrow() %>% as.data.frame()
comptable <- cbind(started,finished,included)
colnames(comptable)[1:3] <- c("started", "finished", "included")
comptable$excluded <- comptable$finished - comptable$included
exclusion_rate <- (comptable$excluded / comptable$finished) * 100
comptable_exp <- comptable
comptable_spf
comptable_exp
n_explicit
n_speed
n_construal
round(rate_speedtask,2)
round(rate_construaltask,2)
agestat <- jmv::descriptives(spf_completed, c("age"), sd = TRUE)
#table(alldat$sex)
tt <- as.data.frame(table(spf_completed$sex))
pF <- (tt$Freq[2]/(tt$Freq[3] + tt$Freq[2] + tt$Freq[1]))*100
#table(alldat$race)
ttt <- as.data.frame(table(spf_completed$race))
pW <- (ttt$Freq[9]/(ttt$Freq[1] + ttt$Freq[2] + ttt$Freq[3] + ttt$Freq[4] + ttt$Freq[5] + ttt$Freq[6] + ttt$Freq[7] + ttt$Freq[8] + ttt$Freq[9]))*100
agestat
agestat <- jmv::descriptives(explicits_completed, c("age"), sd = TRUE)
tt <- as.data.frame(table(explicits_completed$sex))
pF <- (tt$Freq[2]/(tt$Freq[3] + tt$Freq[2] + tt$Freq[1]))*100
ttt <- as.data.frame(table(explicits_completed$race))
pW <- (ttt$Freq[9]/(ttt$Freq[1] + ttt$Freq[2] + ttt$Freq[3] + ttt$Freq[4] + ttt$Freq[5] + ttt$Freq[6] + ttt$Freq[7] + ttt$Freq[8] + ttt$Freq[9]))*100
tttt <- as.data.frame(table(explicits_completed$orgn))
pUS <- (tttt$Freq[37] / nrow(explicits_completed))*100
View(tttt)
pUS <- (tttt$Freq[25] / nrow(explicits_completed))*100
p_nonUS <- 100 - pUS
round((p_nonUS),2)
spf_completed <- read.csv("sdspf3_cleaned_sessions.csv", header = TRUE)
explicits_completed <- read.csv("sdspf3_exp_completed_sessions.csv", header = TRUE)
write.csv(explicits_completed,file = "sdspf3_exp_completed_sessions.csv",na = "") # total N = 469
explicits_completed <- read.csv("sdspf3_exp_completed_sessions.csv", header = TRUE)
# turn explicits long
explicits_long <- explicits_completed %>% select(session_id,left_concept,rate1,rate2,dimension) %>% pivot_longer(cols = rate1:rate2,names_to = "cat",values_to = "mean_assoc") %>% drop_na(mean_assoc)
spf_completed <- read.csv("sdspf3_cleaned_sessions.csv", header = TRUE)
explicits_completed <- read.csv("sdspf3_exp_completed_sessions.csv", header = TRUE)
# turn explicits long
explicits_long <- explicits_completed %>% select(session_id,left_concept,rate1,rate2,dimension) %>% pivot_longer(cols = rate1:rate2,names_to = "cat",values_to = "mean_assoc") %>% drop_na(mean_assoc)
explicits_long$category <- NA
explicits_long$category[which(grepl('rate1', explicits_long$cat) & explicits_long$dimension == "speed")] <- 'Fast'
explicits_long$category[which(grepl('rate2', explicits_long$cat) & explicits_long$dimension == "speed")] <- 'Slow'
explicits_long$category[which(grepl('rate1', explicits_long$cat) & explicits_long$dimension == "construal")] <- 'Concrete'
explicits_long$category[which(grepl('rate2', explicits_long$cat) & explicits_long$dimension == "construal")] <- 'Abstract'
table(explicits_long$category,exclude = NULL)
exp.table <- as.data.frame(mysumBy(dt=explicits_long, mean_assoc ~ dimension + category))
kable_styling(knitr::kable(exp.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean Self-Reported Association Between Speed & Construal" = 8)) %>% footnote(general = "Concrete and Abstract show mean rating of association with Speed, higher ratings indicate stronger associations with Slow (rather than Fast). Fast and Slow show mean rating of association with Construal, higher ratings indicate stronger associations with Abstract (rather than Concrete).",footnote_as_chunk = T)
exp.table2 <- as.data.frame(mysumBy(dt=explicits_long, mean_assoc ~ dimension + category + left_concept))
kable_styling(knitr::kable(exp.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean Self-Reported Association Between Speed & Construal, by Scale Side" = 9)) %>% footnote(general = "Concrete and Abstract show mean rating of association with Speed, higher ratings indicate stronger associations with Slow (rather than Fast). Fast and Slow show mean rating of association with Construal, higher ratings indicate stronger associations with Abstract (rather than Concrete). left_concept = the concept that appeared on the left side of the scale.",footnote_as_chunk = T)
spfoverall.table <- as.data.frame(mysumBy(dt=spf_completed, ~ spf.D))
kable_styling(knitr::kable(spfoverall.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean SPF Association Between Speed & Construal: Overall D score" = 6))
spf.table <- as.data.frame(mysumBy(dt=spf_completed, ~ spf.D.SlowFar+spf.D.SlowNear+spf.D.FastFar+spf.D.FastNear))
spf.table <- as.data.frame(mysumBy(dt=spf_completed, ~ spf.D.AbstractSlow+spf.D.ConcreteSlow+spf.D.AbstractFast+spf.D.ConcreteFast))
kable_styling(knitr::kable(spf.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean SPF Association Between Speed & Construal: All Trial Conditions" = 6))
spfoverall.table2 <- as.data.frame(mysumBy(dt=spf_completed, spf.D ~ left_cat))
kable_styling(knitr::kable(spfoverall.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean SPF Association Between Speed & Construal: Overall D score by location of Speed category. left_cat = the concept that appeared on the left side of the screen." = 7))
spfoverall.table
spf.table2 <- as.data.frame(mysumBy(dt=spfscore, ~ spf.p1.rt.ConcreteFast.m + spf.p1.rt.AbstractFast.m + spf.p2.rt.ConcreteFast.m + spf.p2.rt.AbstractFast.m + spf.p3.rt.ConcreteFast.m + spf.p3.rt.AbstractFast.m))
kable_styling(knitr::kable(spf.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
kable_styling(knitr::kable(spf.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
construaldat <- explicits_completed %>% filter(dimension == "construal")
construaldat_long <- explicits_long %>% filter(dimension == "construal")
expd.ttest <- jmv::ttestPS(construaldat, pairs = list(list(i1 = 'rate1', i2 = 'rate2')), students = T, bf = T, hypothesis ="different", ci=F, ciES = T, desc=F, effectSize = T)
expd.ttest
effectsize::cohens_d(mean_assoc ~ category, data = construaldat_long, paired = T)
speeddat <- explicits_completed %>% filter(dimension == "speed")
speeddat_long <- explicits_long %>% filter(dimension == "speed")
exps.ttest <- jmv::ttestPS(speeddat, pairs = list(list(i1 = 'rate1', i2 = 'rate2')), students = T, bf = T, hypothesis ="different", ci=F, ciES = T, desc=F, effectSize = T)
exps.ttest
effectsize::cohens_d(mean_assoc ~ category, data = speeddat_long, paired = T)
construalaov <- afex::aov_ez(c("session_id"), c("mean_assoc"), construaldat_long, between = c("left_concept"), within = c("category"),
anova_table=list(correction = "none", es = "pes")) #es = "ges"
knitr::kable(afex::nice(construalaov)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")  %>% add_header_above(c("Self-report: construal-level ratings ANOVA, as a function of construal-category & position on VAS scale" = 6))
summary(construalaov)
construalaov
library(effectsize)
F_to_eta2(
f = c(16.50, 11.21, 0.29),
df = c(1, 1, 1),
df_error = c(226, 226, 226),
ci = 0.95
)
velocityaov <- afex::aov_ez(c("session_id"), c("mean_assoc"), speeddat_long, between = c("left_concept"), within = c("category"),
anova_table=list(correction = "none", es = "pes")) #es = "ges"
knitr::kable(afex::nice(velocityaov)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")  %>% add_header_above(c("Self-report: Velocity-level ratings ANOVA, as a function of velocity-category & position on VAS scale" = 6))
plot_velocity <- emmeans::emmip(velocityaov, left_concept ~ category, CIs = TRUE)
plot_velocity <- plot_velocity + ggplot2::labs(y = "Association Scores")
plot_velocity
#summary(velocityaov)
# get CIs
library(effectsize)
velocityaov
F_to_eta2(
f = c(0.18, 6.03, 0.01),
df = c(1, 1, 1),
df_error = c(239, 239, 239),
ci = 0.95
)
tt <- jmv::ttestOneS(spf_completed, spf.D, students = TRUE, bf = TRUE, bfPrior = 0.707, testValue = 0, hypothesis = "dt", meanDiff = F, effectSize = TRUE, ci = F, ciES = T, ciWidthES = 95,
ciWidth = 95, desc = TRUE, miss = "perAnalysis")
tt
# t.test(spf_completed$spf.D, conf.level = 0.95, paired = F)
effectsize::cohens_d(spf_completed$spf.D, paired = F)
spf_completed1 <- spf_completed %>% drop_na(left_cat) %>% filter(left_cat != "")
jmv::ttestIS(spf_completed1, c("spf.D"), "left_cat", students = TRUE, bf = TRUE, ci= F, desc=F, effectSize = T, ciES = T, ciWidthES = 95,miss = "perAnalysis")
# t.test(alldat_full1$spf.D ~ alldat_full1$left_cat, conf.level = 0.95)
effectsize::cohens_d(spf_completed1$spf.D ~ spf_completed1$left_cat)
completed_dat <- read.csv("sdspf3_completed_sessions.csv", header = TRUE)
completed_dat <- completed_dat %>% dplyr::filter(spf.ok==TRUE) # total N = 235
completed_dat <- read.csv("sdspf3_completed_sessions.csv", header = TRUE)
completed_dat <- completed_dat %>% dplyr::filter(spf.ok==TRUE) # total N = 235
completed_dat <- completed_dat %>% select(session_id,spf.D,left_cat,rate1,rate2,dimension,left_concept)
nrow(completed_dat)
View(alldat_completed)
aa <- alldat_completed %>% select(session_id,spf.D,diff,comp)
View(aa)
completed_dat <- completed_dat %>% select(session_id,spf.D,left_cat,rate1,rate2,dimension,left_concept)
nrow(completed_dat)
explicits_completed_long <- completed_dat %>% tidyr::gather(cat, mean_assoc, rate1:rate2)
explicits_completed_long <- completed_dat %>% tidyr::gather(cat, mean_assoc, rate1:rate2)
explicits_completed_long$category <- NA
explicits_completed_long$category[which(grepl('rate1', explicits_completed_long$cat) & explicits_completed_long$dimension == "speed")] <- 'Fast'
explicits_completed_long$category[which(grepl('rate2', explicits_completed_long$cat) & explicits_completed_long$dimension == "speed")] <- 'Slow'
explicits_completed_long$category[which(grepl('rate1', explicits_completed_long$cat) & explicits_completed_long$dimension == "construal")] <- 'Concrete'
explicits_completed_long$category[which(grepl('rate2', explicits_completed_long$cat) & explicits_completed_long$dimension == "construal")] <- 'Abstract'
table(explicits_completed_long$category,exclude = NULL)
exp.table <- as.data.frame(mysumBy(dt=explicits_completed_long, mean_assoc ~ dimension + category))
kable_styling(knitr::kable(exp.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean Self-Reported Association Between Speed & Construal" = 8)) %>% footnote(general = "Concrete and Abstract show mean rating of association with Speed, higher ratings indicate stronger associations with Slow (rather than Fast). Fast and Slow show mean rating of association with Construal, higher ratings indicate stronger associations with Abstract (rather than Concrete).",footnote_as_chunk = T)
exp.table2 <- as.data.frame(mysumBy(dt=explicits_completed_long, mean_assoc ~ dimension + category + left_concept))
kable_styling(knitr::kable(exp.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean Self-Reported Association Between Speed & Construal, by Scale Side" = 9)) %>% footnote(general = "Concrete and Abstract show mean rating of association with Speed, higher ratings indicate stronger associations with Slow (rather than Fast). Fast and Slow show mean rating of association with Construal, higher ratings indicate stronger associations with Abstract (rather than Concrete). left_concept = the concept that appeared on the left side of the scale.",footnote_as_chunk = T)
spfoverall.table <- as.data.frame(mysumBy(dt=completed_dat, ~ spf.D))
kable_styling(knitr::kable(spfoverall.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean SPF Association Between Speed & Construal: Overall D score" = 6))
spfoverall.table2 <- as.data.frame(mysumBy(dt=completed_dat, spf.D ~ left_cat))
kable_styling(knitr::kable(spfoverall.table2)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c("Mean SPF Association Between Speed & Construal: Overall D score by location of Speed category. left_cat = the concept that appeared on the left side of the screen." = 7))
construaldat <- completed_dat %>% filter(dimension == "construal")
construaldat_long <- explicits_completed_long %>% filter(dimension == "construal")
expc.ttest <- jmv::ttestPS(construaldat, pairs = list(list(i1 = 'rate1', i2 = 'rate2')), students = T, bf = T, hypothesis ="different", ci=F, ciES = T, desc=F, effectSize = T)
expc.ttest
effectsize::cohens_d(mean_assoc ~ category, data = construaldat_long, paired = T)
speeddat <- completed_dat %>% filter(dimension == "speed")
speeddat_long <- explicits_completed_long %>% filter(dimension == "speed")
exps.ttest <- jmv::ttestPS(speeddat, pairs = list(list(i1 = 'rate1', i2 = 'rate2')), students = T, bf = T, hypothesis ="different", ci=F, ciES = T, desc=F, effectSize = T)
exps.ttest
effectsize::cohens_d(mean_assoc ~ category, data = speeddat_long, paired = T)
construalaov <- afex::aov_ez(c("session_id"), c("mean_assoc"), construaldat_long, between = c("left_concept"), within = c("category"),
anova_table=list(correction = "none", es = "pes")) #es = "ges"
knitr::kable(afex::nice(construalaov)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")  %>% add_header_above(c("Self-report: construal-level ratings ANOVA, as a function of construal-category & position on VAS scale" = 6))
plot_construal <- emmeans::emmip(construalaov, left_concept ~ category, CIs = TRUE)
plot_construal <- plot_construal + ggplot2::labs(y = "Association Scores")
plot_construal
construalaov
F_to_eta2(
f = c(13.60, 11.71, 0.40),
df = c(1, 1, 1),
df_error = c(214, 214, 214),
ci = 0.95
)
velocityaov <- afex::aov_ez(c("session_id"), c("mean_assoc"), speeddat_long, between = c("left_concept"), within = c("category"),
anova_table=list(correction = "none", es = "pes")) #es = "ges"
knitr::kable(afex::nice(velocityaov)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")  %>% add_header_above(c("Self-report: Velocity-level ratings ANOVA, as a function of velocity-category & position on VAS scale" = 6))
velocityaov
tt <- jmv::ttestOneS(completed_dat, spf.D, students = TRUE, bf = TRUE, bfPrior = 0.707, testValue = 0, hypothesis = "dt", meanDiff = F, effectSize = TRUE, ci = F, ciES = T, ciWidthES = 95,
ciWidth = 95, desc = TRUE, miss = "perAnalysis")
tt
# t.test(spf_completed$spf.D, conf.level = 0.95, paired = F)
effectsize::cohens_d(completed_dat$spf.D, paired = F)
spf_completed1 <- spf_completed %>% drop_na(left_cat) %>% filter(left_cat != "")
jmv::ttestIS(spf_completed1, c("spf.D"), "left_cat", students = TRUE, bf = TRUE, ci= F, desc=F, effectSize = T, ciES = T, ciWidthES = 95,miss = "perAnalysis")
# t.test(alldat_full1$spf.D ~ alldat_full1$left_cat, conf.level = 0.95)
effectsize::cohens_d(spf_completed$spf.D ~ spf_completed$left_cat)
effectsize::cohens_d(spf_completed1$spf.D ~ spf_completed1$left_cat)
