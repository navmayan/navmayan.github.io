ret[length(t)] = difftime(strptime(unlist(x["session_last_update_date"]), format="%d%b%Y %T"), t[length(t)], units = "secs")
#Add NAs for missing tasks to make sure there are equal number of columns for each subject
if (length(t) < ncol(task.order) - 1)
ret[length(t):(ncol(task.order) - 1)] = NA
#Return the computed row
c(x["session_id"], ret)
})))
#Convert time columns to numeric objects
completion[,2:ncol(completion)] = apply(completion[,2:ncol(completion)], 2, as.numeric)
#Rename columns to meaningful names
colnames(completion) = c("session_id", paste("time", 0:(ncol(task.order) - 2), sep=""))
#Combine the task order and completion time data drames
sessions = merge(task.order, completion, by = "session_id")
#Then calculate completion time from individual tasks
theTimes <- sessions[,grepl( "time" , colnames( sessions ) )]
sessions$completion_secs = rowSums(theTimes, na.rm=TRUE)
#Remove data frames to free memory
rm(completion, sl, task.order, theTimes, times, sdup1, sdup2)
#Save the session data (recommended to view this file in Excel, to understand what we saved)
#write.csv(sessions,file=paste(dir, "sessions.csv", sep="\\"))
#load 'explicit' file
explicit <- readr::read_delim("explicit.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
##memory##
#number of behaviors
#positive (0-20)
ex_mnumpos <- explicit %>% dplyr::filter(question_name=="mnumpos")
ex_mnumpos <- transform(ex_mnumpos, question_response=as.numeric(question_response))
ex_mnumpos$question_response[ex_mnumpos$question_response == -999] <- NA
#rescale
ex_mnumpos$resp <- mapply(function(x) x-1,ex_mnumpos$question_response)
#negative (0-20)
ex_mnumneg <- explicit %>% dplyr::filter(question_name=="mnumneg")
ex_mnumneg <- transform(ex_mnumneg, question_response=as.numeric(question_response))
ex_mnumneg$question_response[ex_mnumneg$question_response == -999] <- NA
ex_mnumneg$resp <- mapply(function(x) x-1,ex_mnumneg$question_response)
ex_mnumpos$numpos <- ex_mnumpos$resp
ex_mnumneg$numneg <- ex_mnumneg$resp
num <- merge(ex_mnumpos, ex_mnumneg, by = "session_id")
num <- num %>% select(c(session_id, numpos, numneg))
#how pos/neg were the behaviors
#positive (1 - Not at all positive, 7 - Completely positive)
ex_mhowpos <- explicit %>% dplyr::filter(question_name=="mhowpos")
ex_mhowpos <- transform(ex_mhowpos, question_response=as.numeric(question_response))
ex_mhowpos$question_response[ex_mhowpos$question_response == -999] <- NA
#negative (1 - Not at all negative, 7 - Completely negative)
ex_mhowneg <- explicit %>% dplyr::filter(question_name=="mhowneg")
ex_mhowneg <- transform(ex_mhowneg, question_response=as.numeric(question_response))
ex_mhowneg$question_response[ex_mhowneg$question_response == -999] <- NA
ex_mhowpos$howpos <- ex_mhowpos$question_response
ex_mhowneg$howneg <- ex_mhowneg$question_response
how <- merge(ex_mhowpos, ex_mhowneg, by = "session_id")
how <- how %>% select(c(session_id, howpos, howneg))
#how related to was the target to pos/neg
#positivity (1 - Not at all related to positivity, 7 - Very much related to positivity)
ex_mrelpos <- explicit %>% dplyr::filter(question_name=="mrelpos")
ex_mrelpos <- transform(ex_mrelpos, question_response=as.numeric(question_response))
ex_mrelpos$question_response[ex_mrelpos$question_response == -999] <- NA
#negativity (1 - Not at all related to negativity, 7 - Very much related to negativity)
ex_mrelneg <- explicit %>% dplyr::filter(question_name=="mrelneg")
ex_mrelneg <- transform(ex_mrelneg, question_response=as.numeric(question_response))
ex_mrelneg$question_response[ex_mrelneg$question_response == -999] <- NA
ex_mrelpos$relpos <- ex_mrelpos$question_response
ex_mrelneg$relneg <- ex_mrelneg$question_response
rel <- merge(ex_mrelpos, ex_mrelneg, by = "session_id")
rel <- rel %>% select(c(session_id, relpos, relneg))
# bind DFs
questionScores <- merge(num, how, by = "session_id")
questionScores <- merge(questionScores, rel, by = "session_id")
##objective ambivalence##
#keep only oamb responses
#positivity
ex_oamb.p <- explicit %>% dplyr::filter(question_name=="oamb.p")
ex_oamb.p <- transform(ex_oamb.p, question_response=as.numeric(question_response))
ex_oamb.p$question_response[ex_oamb.p$question_response == -999] <- NA
ex_oamb.p <- transform(ex_oamb.p, question_response=as.numeric(question_response))
#rescale (0-7)
ex_oamb.p$question_response_r <- ex_oamb.p$question_response - 1
#negativity
ex_oamb.n <- explicit %>% dplyr::filter(question_name=="oamb.n")
ex_oamb.n <- transform(ex_oamb.n, question_response=as.numeric(question_response))
ex_oamb.n$question_response[ex_oamb.n$question_response == -999] <- NA
ex_oamb.n <- transform(ex_oamb.n, question_response=as.numeric(question_response))
#rescale (0-7)
ex_oamb.n$question_response_r <- ex_oamb.n$question_response - 1
#add to 'questionScores' table
questionScores$oPos <- ex_oamb.p$question_response_r[match(questionScores$session_id, ex_mnumpos$session_id)]
questionScores$oNeg <- ex_oamb.n$question_response_r[match(questionScores$session_id, ex_mnumpos$session_id)]
#quantify ambivalence by subject
#Thompson et al.'s (1995) formula to quantify ambivalence
questionScores$obj.amb.kapl <- (questionScores$oPos+questionScores$oNeg)-abs(questionScores$oPos-questionScores$oNeg)
#questionScores$obj.amb.tomp <- ((questionScores$oPos+questionScores$oNeg)/2)-abs(questionScores$oPos-questionScores$oNeg)
questionScores$obj.amb.tomp <- 5-abs(questionScores$oPos-questionScores$oNeg)+((questionScores$oPos+questionScores$oNeg)/2)
questionScores$obj.amb.altered <- (questionScores$oPos+questionScores$oNeg)-(abs(questionScores$oPos-questionScores$oNeg)*1.5)
##subjective ambivalence##
#keep only samb responses
ex_samb123 <- explicit %>% dplyr::filter(question_name=="samb1" | question_name=="samb2" | question_name=="samb3" )
#transform responses to numeric
ex_samb123 <- transform(ex_samb123, question_response=as.numeric(question_response))
ex_samb123$question_response[ex_samb123$question_response == -999] <- NA
#aggregate mean samb by session_id
ex_samb123_mean <- aggregate(x=ex_samb123$question_response,by=list(ex_samb123$session_id),FUN=mean, na.action = na.omit)
#add to 'questionScores' table
questionScores$subj.amb <- ex_samb123_mean$x[match(questionScores$session_id, ex_samb123_mean$Group.1)]
#add judgment ambivalence (based on memory questions)
questionScores$how.amb.kapl <- (questionScores$howpos+questionScores$howneg)-abs(questionScores$howpos-questionScores$howneg)
questionScores$how.amb.tomp <- 5-abs(questionScores$howpos-questionScores$howneg)+((questionScores$howpos+questionScores$howneg)/2)
questionScores$how.amb.altered <-(questionScores$howpos+questionScores$howneg)-(abs(questionScores$howpos-questionScores$howneg))*1.5
questionScores$num.amb.kapl <- (questionScores$numpos+questionScores$numneg)-abs(questionScores$numpos-questionScores$numneg)
questionScores$num.amb.tomp <- 5-abs(questionScores$numpos-questionScores$numneg)+((questionScores$numpos+questionScores$numneg)/2)
questionScores$num.amb.altered <- (questionScores$numpos+questionScores$numneg)-(abs(questionScores$numpos-questionScores$numneg))*1.5
questionScores$rel.amb.kapl <- (questionScores$relpos+questionScores$relneg)-abs(questionScores$relpos-questionScores$relneg)
questionScores$rel.amb.tomp <- 5-abs(questionScores$relpos-questionScores$relneg)+((questionScores$relpos+questionScores$relneg)/2)
questionScores$rel.amb.altered <- (questionScores$relpos+questionScores$relneg)-(abs(questionScores$relpos-questionScores$relneg))*1.5
questionScores$comp <- sessions$ord14[match(questionScores$session_id, sessions$session_id)]
cond <- explicit %>% dplyr::filter(question_name=="cond")
questionScores$cond <- cond$question_response[match(questionScores$session_id, cond$session_id)]
## remove all Ps that did not complete the study
questionScores <- questionScores %>% dplyr::filter(comp=="lastpage") #ord13
##save to file
write.csv(questionScores,file = "bisources4.csv",na = "")
#Read reaction time tasks
iat <- readr::read_delim("iat.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
nrow(iat) #Always test all rows were read fine (open the txt file in notepad++ to count the lines)
#Convert trial_error to numeric, and make sure trial_latency is numeric
iat$trial_error <- as.numeric(as.character(iat$trial_error))
class(iat$trial_error)
class(iat$trial_latency)
#task_name helps differentiate between the different reaction time tasks.
unique(iat$task_name)
#Get ep rows
epRaw <- subset(iat, task_name %in% c('ep'))
View(epRaw)
#Learn a bit about how we coded the blocks.
unique(epRaw$block_pairing_definition)
unique(epRaw$block_number)
#Learn a bit about how we coded the blocks.
unique(epRaw$block_pairing_definition)
epRaw$targetCat <- NA
epRaw$targetCat <- NA
epRaw$targetCat[which(grepl('the negative man', epRaw$block_pairing_definition))] <- 'neg'
epRaw$targetCat[which(grepl('the positive man',epRaw$block_pairing_definition))] <- 'pos'
epRaw$targetCat[which(grepl('novel',epRaw$block_pairing_definition))] <- 'novel'
epRaw$targetCat[which(grepl('the target man',epRaw$block_pairing_definition))] <- 'biv'
table(epRaw$targetCat, exclude=NULL)
epRaw$primeCat <- NA
epRaw$primeCat[which(grepl('the negative man', epRaw$block_pairing_definition))] <- 'neg'
epRaw$primeCat[which(grepl('the positive man',epRaw$block_pairing_definition))] <- 'pos'
epRaw$primeCat[which(grepl('novel',epRaw$block_pairing_definition))] <- 'novel'
epRaw$primeCat[which(grepl('the target man',epRaw$block_pairing_definition))] <- 'biv'
table(epRaw$primeCat, exclude=NULL)
pacman::p_load(tinytex,rmdformats,magrittr,stringr,dplyr,knitr,kableExtra,IAT,tidyr,jmv)
options(knitr.table.format = "html") #,encoding = 'UTF-8'
source("C:\\Users\\Lenovo\\Google Drive\\School\\PhD\\Pilots\\analysis\\RScriptsForAnalysis\\yba.funcs.R")
setwd("C:/Users/Lenovo/Google Drive/School/PhD/Pilots/analysis/bisources4")
####################################################################################################################
#Read session data
####################################################################################################################
s0 <- readr::read_delim("sessionTasks.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
sl <- s0[,c("session_id", "task_id", "task_number", "user_agent", "task_creation_date", "session_last_update_date")]
#Get rid of sessions from other studies (got the task_ids from a later in this script and then got back to get rid of those)
table(sl$task_id)
#Get rid of deuplicates
sdup1 <- sl[duplicated(sl[,c('session_id', 'task_number')]),]
#sdup1$session_id
#sl <- sl[!duplicated(sl[,c('session_id', 'task_number')]),]
#Create the task-order data (one row per participant)
task.order <- data.table::dcast(sl, session_id  ~ task_number, value.var = 'task_id')
#Change column names
colnames(task.order)[2:ncol(task.order)] <- paste('ord', colnames(task.order)[2:ncol(task.order)], sep='')
#Get rid of deuplicates
sdup2 <- sl[duplicated(sl[,c('session_id', 'session_last_update_date', 'task_id')]),]
sdup2$session_id
sl <- sl[!duplicated(sl[,c('session_id', 'session_last_update_date', 'task_id')]),]
#Refresh levels of the task_id factor
sl$task_id <- factor(sl$task_id)
#Get data frame of tasks' times
times <- data.table::dcast(sl, session_id + session_last_update_date ~ task_id, value.var = 'task_creation_date')
#Change column names
colnames(times)[3:ncol(times)] <- paste('t.', colnames(times)[3:ncol(times)], sep='')
#Merge tasks and times
times <- merge(times, task.order, by = "session_id")
#Calculate the difference between each time column and the next.
##(Aharaon's code. A bit too complicated for me to understand)##
completion <- data.frame(t(apply(times, 1, function(x){
ret = c()
#Get task names by order
tasks = x[paste("ord", 0:(ncol(task.order) - 1), sep="")]
#Remove missing tasks
tasks = tasks[!is.na(tasks)]
#select tasks by order
t = strptime(unlist(x[paste("t", unlist(tasks), sep=".")]), format="%d%b%Y %T")
#Calculate time difference
for (i in 1:(length(t) - 1)){
ret[i] = difftime(t[i + 1], t[i], units = "secs")
}
#Calculate time of last page (0 if it's a debriefing page or some other task with no data)
ret[length(t)] = difftime(strptime(unlist(x["session_last_update_date"]), format="%d%b%Y %T"), t[length(t)], units = "secs")
#Add NAs for missing tasks to make sure there are equal number of columns for each subject
if (length(t) < ncol(task.order) - 1)
ret[length(t):(ncol(task.order) - 1)] = NA
#Return the computed row
c(x["session_id"], ret)
})))
#Convert time columns to numeric objects
completion[,2:ncol(completion)] = apply(completion[,2:ncol(completion)], 2, as.numeric)
#Rename columns to meaningful names
colnames(completion) = c("session_id", paste("time", 0:(ncol(task.order) - 2), sep=""))
#Combine the task order and completion time data drames
sessions = merge(task.order, completion, by = "session_id")
#Then calculate completion time from individual tasks
theTimes <- sessions[,grepl( "time" , colnames( sessions ) )]
sessions$completion_secs = rowSums(theTimes, na.rm=TRUE)
#Remove data frames to free memory
rm(completion, sl, task.order, theTimes, times, sdup1, sdup2)
#Save the session data (recommended to view this file in Excel, to understand what we saved)
#write.csv(sessions,file=paste(dir, "sessions.csv", sep="\\"))
#load 'explicit' file
explicit <- readr::read_delim("explicit.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
##memory##
#number of behaviors
#positive (0-20)
ex_mnumpos <- explicit %>% dplyr::filter(question_name=="mnumpos")
ex_mnumpos <- transform(ex_mnumpos, question_response=as.numeric(question_response))
ex_mnumpos$question_response[ex_mnumpos$question_response == -999] <- NA
#rescale
ex_mnumpos$resp <- mapply(function(x) x-1,ex_mnumpos$question_response)
#negative (0-20)
ex_mnumneg <- explicit %>% dplyr::filter(question_name=="mnumneg")
ex_mnumneg <- transform(ex_mnumneg, question_response=as.numeric(question_response))
ex_mnumneg$question_response[ex_mnumneg$question_response == -999] <- NA
ex_mnumneg$resp <- mapply(function(x) x-1,ex_mnumneg$question_response)
ex_mnumpos$numpos <- ex_mnumpos$resp
ex_mnumneg$numneg <- ex_mnumneg$resp
num <- merge(ex_mnumpos, ex_mnumneg, by = "session_id")
num <- num %>% select(c(session_id, numpos, numneg))
#how pos/neg were the behaviors
#positive (1 - Not at all positive, 7 - Completely positive)
ex_mhowpos <- explicit %>% dplyr::filter(question_name=="mhowpos")
ex_mhowpos <- transform(ex_mhowpos, question_response=as.numeric(question_response))
ex_mhowpos$question_response[ex_mhowpos$question_response == -999] <- NA
#negative (1 - Not at all negative, 7 - Completely negative)
ex_mhowneg <- explicit %>% dplyr::filter(question_name=="mhowneg")
ex_mhowneg <- transform(ex_mhowneg, question_response=as.numeric(question_response))
ex_mhowneg$question_response[ex_mhowneg$question_response == -999] <- NA
ex_mhowpos$howpos <- ex_mhowpos$question_response
ex_mhowneg$howneg <- ex_mhowneg$question_response
how <- merge(ex_mhowpos, ex_mhowneg, by = "session_id")
how <- how %>% select(c(session_id, howpos, howneg))
#how related to was the target to pos/neg
#positivity (1 - Not at all related to positivity, 7 - Very much related to positivity)
ex_mrelpos <- explicit %>% dplyr::filter(question_name=="mrelpos")
ex_mrelpos <- transform(ex_mrelpos, question_response=as.numeric(question_response))
ex_mrelpos$question_response[ex_mrelpos$question_response == -999] <- NA
#negativity (1 - Not at all related to negativity, 7 - Very much related to negativity)
ex_mrelneg <- explicit %>% dplyr::filter(question_name=="mrelneg")
ex_mrelneg <- transform(ex_mrelneg, question_response=as.numeric(question_response))
ex_mrelneg$question_response[ex_mrelneg$question_response == -999] <- NA
ex_mrelpos$relpos <- ex_mrelpos$question_response
ex_mrelneg$relneg <- ex_mrelneg$question_response
rel <- merge(ex_mrelpos, ex_mrelneg, by = "session_id")
rel <- rel %>% select(c(session_id, relpos, relneg))
# bind DFs
questionScores <- merge(num, how, by = "session_id")
questionScores <- merge(questionScores, rel, by = "session_id")
##objective ambivalence##
#keep only oamb responses
#positivity
ex_oamb.p <- explicit %>% dplyr::filter(question_name=="oamb.p")
ex_oamb.p <- transform(ex_oamb.p, question_response=as.numeric(question_response))
ex_oamb.p$question_response[ex_oamb.p$question_response == -999] <- NA
ex_oamb.p <- transform(ex_oamb.p, question_response=as.numeric(question_response))
#rescale (0-7)
ex_oamb.p$question_response_r <- ex_oamb.p$question_response - 1
#negativity
ex_oamb.n <- explicit %>% dplyr::filter(question_name=="oamb.n")
ex_oamb.n <- transform(ex_oamb.n, question_response=as.numeric(question_response))
ex_oamb.n$question_response[ex_oamb.n$question_response == -999] <- NA
ex_oamb.n <- transform(ex_oamb.n, question_response=as.numeric(question_response))
#rescale (0-7)
ex_oamb.n$question_response_r <- ex_oamb.n$question_response - 1
#add to 'questionScores' table
questionScores$oPos <- ex_oamb.p$question_response_r[match(questionScores$session_id, ex_mnumpos$session_id)]
questionScores$oNeg <- ex_oamb.n$question_response_r[match(questionScores$session_id, ex_mnumpos$session_id)]
#quantify ambivalence by subject
#Thompson et al.'s (1995) formula to quantify ambivalence
questionScores$obj.amb.kapl <- (questionScores$oPos+questionScores$oNeg)-abs(questionScores$oPos-questionScores$oNeg)
#questionScores$obj.amb.tomp <- ((questionScores$oPos+questionScores$oNeg)/2)-abs(questionScores$oPos-questionScores$oNeg)
questionScores$obj.amb.tomp <- 5-abs(questionScores$oPos-questionScores$oNeg)+((questionScores$oPos+questionScores$oNeg)/2)
questionScores$obj.amb.altered <- (questionScores$oPos+questionScores$oNeg)-(abs(questionScores$oPos-questionScores$oNeg)*1.5)
##subjective ambivalence##
#keep only samb responses
ex_samb123 <- explicit %>% dplyr::filter(question_name=="samb1" | question_name=="samb2" | question_name=="samb3" )
#transform responses to numeric
ex_samb123 <- transform(ex_samb123, question_response=as.numeric(question_response))
ex_samb123$question_response[ex_samb123$question_response == -999] <- NA
#aggregate mean samb by session_id
ex_samb123_mean <- aggregate(x=ex_samb123$question_response,by=list(ex_samb123$session_id),FUN=mean, na.action = na.omit)
#add to 'questionScores' table
questionScores$subj.amb <- ex_samb123_mean$x[match(questionScores$session_id, ex_samb123_mean$Group.1)]
#add judgment ambivalence (based on memory questions)
questionScores$how.amb.kapl <- (questionScores$howpos+questionScores$howneg)-abs(questionScores$howpos-questionScores$howneg)
questionScores$how.amb.tomp <- 5-abs(questionScores$howpos-questionScores$howneg)+((questionScores$howpos+questionScores$howneg)/2)
questionScores$how.amb.altered <-(questionScores$howpos+questionScores$howneg)-(abs(questionScores$howpos-questionScores$howneg))*1.5
questionScores$num.amb.kapl <- (questionScores$numpos+questionScores$numneg)-abs(questionScores$numpos-questionScores$numneg)
questionScores$num.amb.tomp <- 5-abs(questionScores$numpos-questionScores$numneg)+((questionScores$numpos+questionScores$numneg)/2)
questionScores$num.amb.altered <- (questionScores$numpos+questionScores$numneg)-(abs(questionScores$numpos-questionScores$numneg))*1.5
questionScores$rel.amb.kapl <- (questionScores$relpos+questionScores$relneg)-abs(questionScores$relpos-questionScores$relneg)
questionScores$rel.amb.tomp <- 5-abs(questionScores$relpos-questionScores$relneg)+((questionScores$relpos+questionScores$relneg)/2)
questionScores$rel.amb.altered <- (questionScores$relpos+questionScores$relneg)-(abs(questionScores$relpos-questionScores$relneg))*1.5
questionScores$comp <- sessions$ord14[match(questionScores$session_id, sessions$session_id)]
cond <- explicit %>% dplyr::filter(question_name=="cond")
questionScores$cond <- cond$question_response[match(questionScores$session_id, cond$session_id)]
## remove all Ps that did not complete the study
questionScores <- questionScores %>% dplyr::filter(comp=="lastpage") #ord13
##save to file
write.csv(questionScores,file = "bisources4.csv",na = "")
#Read reaction time tasks
iat <- readr::read_delim("iat.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
nrow(iat) #Always test all rows were read fine (open the txt file in notepad++ to count the lines)
#Convert trial_error to numeric, and make sure trial_latency is numeric
iat$trial_error <- as.numeric(as.character(iat$trial_error))
class(iat$trial_error)
class(iat$trial_latency)
#task_name helps differentiate between the different reaction time tasks.
unique(iat$task_name)
#Get ep rows
epRaw <- subset(iat, task_name %in% c('ep'))
#Learn a bit about how we coded the blocks.
unique(epRaw$block_pairing_definition)
unique(epRaw$block_number)
epRaw$primeCat <- NA
epRaw$primeCat[which(grepl('the negative man', epRaw$block_pairing_definition))] <- 'neg'
epRaw$primeCat[which(grepl('the positive man',epRaw$block_pairing_definition))] <- 'pos'
epRaw$primeCat[which(grepl('novel',epRaw$block_pairing_definition))] <- 'novel'
epRaw$primeCat[which(grepl('the target man',epRaw$block_pairing_definition))] <- 'biv'
table(epRaw$primeCat, exclude=NULL)
epRaw$targetCat <- NA
epRaw$targetCat[which(grepl('Negative', epRaw$block_pairing_definition))] <- 'neg'
epRaw$targetCat[which(grepl('Positive',epRaw$block_pairing_definition))] <- 'pos'
table(epRaw$targetCat, exclude=NULL)
epRaw$cong <-ifelse(epRaw$primeCat==epRaw$targetCat, "congruent",
ifelse((epRaw$primeCat=="pos") & (epRaw$targetCat=="neg"), "incongruent",
ifelse((epRaw$primeCat=="neg") & (epRaw$targetCat=="pos"), "incongruent",
ifelse(epRaw$primeCat=="novel", "neutral",NA))))
table(epRaw$cong, exclude=NULL)
epRaw$cong <-ifelse(epRaw$primeCat==epRaw$targetCat, "congruent",
ifelse((epRaw$primeCat=="pos") & (epRaw$targetCat=="neg"), "incongruent",
ifelse((epRaw$primeCat=="neg") & (epRaw$targetCat=="pos"), "incongruent",
ifelse(epRaw$primeCat=="biv", "bivalent",
ifelse(epRaw$primeCat=="novel", "neutral",NA)))))
table(epRaw$cong, exclude=NULL)
epRaw <- epRaw %>% dplyr::filter(epRaw$trial_error==1)
Get ep rows
#Get ep rows
epRaw <- subset(iat, task_name %in% c('ep'))
#Learn a bit about how we coded the blocks.
unique(epRaw$block_pairing_definition)
unique(epRaw$block_number)
epRaw$primeCat <- NA
epRaw$primeCat[which(grepl('the negative man', epRaw$block_pairing_definition))] <- 'neg'
epRaw$primeCat[which(grepl('the positive man',epRaw$block_pairing_definition))] <- 'pos'
epRaw$primeCat[which(grepl('novel',epRaw$block_pairing_definition))] <- 'novel'
epRaw$primeCat[which(grepl('the target man',epRaw$block_pairing_definition))] <- 'biv'
table(epRaw$primeCat, exclude=NULL)
epRaw$targetCat <- NA
epRaw$targetCat[which(grepl('Negative', epRaw$block_pairing_definition))] <- 'neg'
epRaw$targetCat[which(grepl('Positive',epRaw$block_pairing_definition))] <- 'pos'
table(epRaw$targetCat, exclude=NULL)
epRaw$cong <-ifelse(epRaw$primeCat==epRaw$targetCat, "congruent",
ifelse((epRaw$primeCat=="pos") & (epRaw$targetCat=="neg"), "incongruent",
ifelse((epRaw$primeCat=="neg") & (epRaw$targetCat=="pos"), "incongruent",
ifelse(epRaw$primeCat=="biv", "bivalent",
ifelse(epRaw$primeCat=="novel", "neutral",NA)))))
table(epRaw$cong, exclude=NULL)
epRaw <- epRaw %>% dplyr::filter(epRaw$trial_error==0)
epRaw <- epRaw %>% dplyr::filter(epRaw$trial_latency>=300)
epRaw <- epRaw %>% dplyr::filter(epRaw$trial_latency<=3000)
epScore <- epRaw %>%
group_by(session_id,cong)%>%
dplyr::summarise(meanRT = mean(trial_latency, na.rm=TRUE))
as.data.frame(epScore)
View(epScore)
#Get vn rows
vnRaw <- subset(iat, task_name %in% c('vn'))
#Learn a bit about how we coded the blocks.
unique(vnRaw$block_pairing_definition)
unique(vnRaw$block_number)
vnRaw$primeCat <- NA
vnRaw$primeCat[which(grvnl('the negative man', vnRaw$block_pairing_definition))] <- 'neg'
vnRaw$primeCat <- NA
vnRaw$primeCat[which(grepl('the negative man', vnRaw$block_pairing_definition))] <- 'neg'
vnRaw$primeCat[which(grepl('the positive man',vnRaw$block_pairing_definition))] <- 'pos'
vnRaw$primeCat[which(grepl('novel',vnRaw$block_pairing_definition))] <- 'novel'
vnRaw$primeCat[which(grepl('the target man',vnRaw$block_pairing_definition))] <- 'biv'
table(vnRaw$primeCat, exclude=NULL)
vnRaw$targetCat <- NA
vnRaw$targetCat[which(grepl('Neither Positive nor Negative', vnRaw$block_pairing_definition))] <- 'neutral'
vnRaw$targetCat[which(grepl('Positive or Negative',vnRaw$block_pairing_definition))] <- 'valent'
table(vnRaw$targetCat, exclude=NULL)
vnRaw$primeCat <- NA
vnRaw$primeCat[which(grepl('the negative man', vnRaw$block_pairing_definition))] <- 'neg'
vnRaw$primeCat[which(grepl('the positive man',vnRaw$block_pairing_definition))] <- 'pos'
vnRaw$primeCat[which(grepl('novel',vnRaw$block_pairing_definition))] <- 'neutral'
vnRaw$primeCat[which(grepl('the target man',vnRaw$block_pairing_definition))] <- 'biv'
table(vnRaw$primeCat, exclude=NULL)
vnRaw$cong <-ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat==!"neutral"), "incongruent",NA))))))))
vnRaw$cong <-ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat==!"neutral"), "incongruent",NA)))))))
vnRaw$cong <-ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat!="neutral"), "incongruent",NA)))))))
table(vnRaw$cong, exclude=NULL)
vnRaw$cong <-ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat=="valent"), "incongruent",NA)))))))
table(vnRaw$cong, exclude=NULL)
View(vnRaw)
vnRaw$cong <-ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="valent"), "congruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat=="neutral"), "congruent",
ifelse((vnRaw$primeCat=="pos") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neg") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="biv") & (vnRaw$targetCat=="neutral"), "incongruent",
ifelse((vnRaw$primeCat=="neutral") & (vnRaw$targetCat=="valent"), "incongruent",NA))))))))
table(vnRaw$cong, exclude=NULL)
vnRaw <- vnRaw %>% dplyr::filter(vnRaw$trial_error==0)
vnRaw <- vnRaw %>% dplyr::filter(vnRaw$trial_latency>=300)
vnRaw <- vnRaw %>% dplyr::filter(vnRaw$trial_latency<=3000)
vnScore <- vnRaw %>%
group_by(session_id,cong)%>%
dplyr::summarise(meanRT = mean(trial_latency, na.rm=TRUE))
as.data.frame(vnScore)
vnScore <- as.data.frame(vnScore)
epScore <- as.data.frame(epScore)
View(vnScore)
epScore$comp <- sessions$ord14[match(epScore$session_id, sessions$session_id)]
epScore <- epScore %>% dplyr::filter(comp=="lastpage")
epScore$cond <- cond$question_response[match(epScore$session_id, cond$session_id)]
write.csv(epScore,file = "epScore.csv",na = "")
View(epScore)
write.csv(epScore,file = "epScore.csv",na = "")
vnScore$comp <- sessions$ord14[match(vnScore$session_id, sessions$session_id)]
vnScore <- vnScore %>% dplyr::filter(comp=="lastpage")
vnScore$cond <- cond$question_response[match(vnScore$session_id, cond$session_id)]
write.csv(vnScore,file = "vnScore.csv",na = "")
epScore <- read.csv("epScore.csv", header = TRUE)
vnScore <- read.csv("vnScore.csv", header = TRUE)
View(epScore)
ep.table <- as.data.frame(mysumBy(dt=epScore, meanRT ~ cong))
kable_styling(knitr::kable(ep.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
##VN
vn.table <- as.data.frame(mysumBy(dt=vnScore, meanRT ~ cong))
kable_styling(knitr::kable(vn.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left") %>% add_header_above(c(" ", "VN" = 7))
vn.table <- as.data.frame(mysumBy(dt=vnScore, meanRT ~ cong))
kable_styling(knitr::kable(vn.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
vnScore <- vnRaw %>%
group_by(session_id,cong,primeCat)%>%
dplyr::summarise(meanRT = mean(trial_latency, na.rm=TRUE))
vnScore <- as.data.frame(vnScore)
vnScore$comp <- sessions$ord14[match(vnScore$session_id, sessions$session_id)]
vnScore <- vnScore %>% dplyr::filter(comp=="lastpage")
vnScore$cond <- cond$question_response[match(vnScore$session_id, cond$session_id)]
write.csv(vnScore,file = "vnScore.csv",na = "")
View(vnScore)
View(epScore)
vn.table <- as.data.frame(mysumBy(dt=vnScore, meanRT ~ cong+primeCat))
kable_styling(knitr::kable(vn.table)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
install.packages(c("backports", "BDgraph", "broom", "broomExtra", "caret", "data.table", "ddalpha", "devtools", "geometry", "ggplot2", "ggthemes", "gsl", "httpuv", "huge", "insight", "jmvcore", "MuMIn", "networkDynamic", "plotrix", "psycho", "rcompanion", "RefManageR", "remotes", "rvest", "sandwich", "shiny", "summarytools", "tinytex", "usethis", "visNetwork", "xfun"))
epScore$condition <- NA
epScore$condition[which(grepl('mix', epScore$cond))] <- 'mix'
epScore$condition[which(grepl('sep', epScore$cond))] <- 'sep'
ggstatsplot::ggbetweenstats(
data = epScore,
x = cong,
y = meanRT,
messages = FALSE,
bf.message = TRUE
) +                                               # further modification outside of ggstatsplot
ggplot2::coord_cartesian(ylim = c(300,1000))
library(ggstatsplot)
ggbetweenstats(
data = epScore,
x = cong,
y = meanRT,
messages = FALSE,
bf.message = TRUE
) +                                               # further modification outside of ggstatsplot
ggplot2::coord_cartesian(ylim = c(300,1000))
install.packages(c("data.table", "ggplot2", "ggthemes", "summarytools"))
